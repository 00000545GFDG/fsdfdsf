import logging
import asyncio
import re
from datetime import datetime, timedelta, timezone

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ChatPermissions
from aiogram.enums import ParseMode
from aiogram.client.bot import DefaultBotProperties

from openai import OpenAI

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ ====
API_TOKEN = '7461983178:AAEdmsfUECEst173CozI2QFBB6wI0P5Wh0Y'
OPENAI_API_KEY = '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'

openai_client = OpenAI(api_key=OPENAI_API_KEY)

# ==== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ====
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ==== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ====
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ==== –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ====
def parse_duration(text):
    text = text.strip().lower()
    units_map = {
        '–º–∏–Ω—É—Ç': 'minutes', '–º–∏–Ω': 'minutes', '–º': 'minutes',
        '—á–∞—Å': 'hours', '—á–∞—Å–æ–≤': 'hours', '—á': 'hours',
        '–¥–µ–Ω—å': 'days', '–¥–Ω—è': 'days', '–¥–Ω–µ–π': 'days', '–¥': 'days',
        '–Ω–µ–¥–µ–ª—è': 'weeks', '–Ω–µ–¥–µ–ª–∏': 'weeks', '–Ω–µ–¥–µ–ª—å': 'weeks', '–Ω': 'weeks',
        '–º–µ—Å—è—Ü': 'days', '–º–µ—Å—è—Ü–∞': 'days', '–º–µ—Å—è—Ü–µ–≤': 'days'
    }
    match = re.match(r'(\d+)\s*(\D+)', text)
    if not match:
        return None
    val, unit_raw = match.groups()
    val = int(val)
    for key in units_map:
        if unit_raw.startswith(key):
            unit = units_map[key]
            return timedelta(days=val * 30) if '–º–µ—Å—è—Ü' in key else timedelta(**{unit: val})
    return None

def build_user_link(name, user_id):
    return f'<a href="tg://user?id={user_id}">{name}</a>'

# ==== –ú–∞—Ç-–ø–∞—Ç—Ç–µ—Ä–Ω—ã ====
INSULT_PATTERNS = [
    r"\b(?:—è\s)?(?:—Ç–≤–æ—é\s)?–º–∞—Ç—å\s?(–µ–±–∞–ª|–µ–±—É|–∏–º–µ–ª)",
    r"\b(–¥–æ–ª–±–æ—ë–±|–¥–æ–ª–±–∞–µ–±|–¥–µ–±–∏–ª|–∏–¥–∏–æ—Ç|—Ç—É–ø–∏—Ü–∞|—à–ª—é—Ö–∞|—à–∞–ª–∞–≤–∞|–º—Ä–∞–∑—å|—Å—É–∫–∞|–ø–∏–¥–æ—Ä|–ø–∏–¥—Ä|—É—ë–±–æ–∫|–µ–±–ª–∞–Ω|—á–º–æ|–≥–æ–Ω–¥–æ–Ω|–≥–Ω–∏–¥–∞|–∫–æ–∑—ë–ª|–ø–µ—Ç—É—Ö|–¥–∞—É–Ω|–∫—Ä–µ—Ç–∏–Ω|–∏–Ω–≤–∞–ª–∏–¥|–±–æ–ª—å–Ω–æ–π –Ω–∞ –≥–æ–ª–æ–≤—É|—á—É—à–ø–∞–Ω|—É–µ–±–∞–Ω|—Ö—É–µ—Å–æ—Å|–≥–∞–≤–Ω–æ–µ–¥|–µ–±–∞–∫–∞|–Ω–µ–¥–æ—É–º–æ–∫|—Ç–≤–∞—Ä—å|–ø—Å–∏–Ω–∞|—Å–æ—Å—É–Ω–æ–∫|–º—É–¥–∏–ª–∞|–≥–æ–≤–Ω—é–∫|–¥–µ–≥–µ–Ω–µ—Ä–∞—Ç|–ø–æ–ø—Ä–æ—à–∞–π–∫–∞|–ø–æ–ø—Ä–æ—à–∞–π–Ω–∏–∫)\b",
    r"–Ω–∞—Ö—É–π|–Ω–∞ —Ö—É–π|–∏–¥–∏\s+–≤\s+–∂–æ–ø—É|–µ–±–∞–Ω—ã–π\s+—Ä–æ—Ç|–µ–±–∞—Ç—å\s+—Ç–µ–±—è|—Å—É–∫–∞\s+–±–ª—è–¥—å"
]

def contains_bad_words(text: str) -> bool:
    text = text.lower()
    return any(re.search(pattern, text) for pattern in INSULT_PATTERNS)

# ==== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ====
async def generate_image(prompt: str) -> str | None:
    try:
        response = await openai_client.images.generate(
            model="dall-e-3",
            prompt=prompt,
            n=1,
            size="1024x1024"
        )
        return response.data[0].url
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /chatgpt ====
@dp.message(F.text.startswith('/chatgpt'))
async def chatgpt_handler(message: Message):
    prompt = message.text[8:].strip()
    if not prompt:
        await message.reply("‚úçÔ∏è –í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä:\n/chatgpt —á—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–Ω—Ç–æ–≤–∞—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å")
        return

    await message.reply("ü§ñ –î—É–º–∞—é...")

    try:
        response = await openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram-–±–æ—Ç, –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ-—Ä—É—Å—Å–∫–∏."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7
        )
        reply = response.choices[0].message.content
        await message.reply(reply)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT.")

# ==== –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ====
@dp.message(F.text)
async def handle_message(message: Message):
    chat_type = message.chat.type
    if chat_type not in ['group', 'supergroup'] or message.from_user.is_bot:
        return

    text = message.text.strip()
    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or message.from_user.id}: {text}")

    # /gen –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if text.lower().startswith('/gen'):
        prompt = text[4:].strip()
        if not prompt:
            await message.reply("‚ùóÔ∏è –£–∫–∞–∂–∏ –∑–∞–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä:\n/gen —Ç–∞–Ω–∫ –≤ —Å—Ç–∏–ª–µ –ø–∏–∫—Å–µ–ª—å-–∞—Ä—Ç")
            return
        await message.reply("üß† –î—É–º–∞—é...")
        image_url = await generate_image(prompt)
        if image_url:
            await message.answer_photo(photo=image_url, caption=f"üñº <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b> {prompt}")
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    # –ú—É—Ç –∑–∞ –º–∞—Ç
    if contains_bad_words(text):
        until = datetime.now(timezone.utc) + timedelta(minutes=30)
        try:
            await bot.restrict_chat_member(
                message.chat.id,
                message.from_user.id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=until
            )
            await message.answer(
                f"üö´ {build_user_link(message.from_user.full_name, message.from_user.id)} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ 30 –º–∏–Ω—É—Ç\n"
                f"üí¨ –ü—Ä–∏—á–∏–Ω–∞: <i>–º–∞—Ç</i>"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ –∑–∞ –º–∞—Ç: {e}")
            await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –º—É—Ç. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")
        return

    # –ö–æ–º–∞–Ω–¥—ã: –º—É—Ç / –±–∞–Ω / —Ä–∞–∑–º—É—Ç
    lines = text.split('\n')
    cmd_line = lines[0].lower().strip()
    reason = lines[1].strip() if len(lines) > 1 else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"

    if cmd_line.startswith('–º—É—Ç'):
        if not message.reply_to_message:
            await message.reply("üîá –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä:\n–º—É—Ç 10 –º–∏–Ω—É—Ç\n—Å–ø–∞–º")
            return
        target = message.reply_to_message.from_user
        duration_str = cmd_line.split(' ', 1)[1] if ' ' in cmd_line else "5 –º–∏–Ω—É—Ç"
        duration = parse_duration(duration_str)
        if not duration:
            await message.reply("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 10 –º–∏–Ω—É—Ç, 1 —á–∞—Å, 2 –¥–Ω—è.")
            return
        until = datetime.now(timezone.utc) + duration
        try:
            await bot.restrict_chat_member(
                message.chat.id,
                target.id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=until
            )
            await message.reply(
                f"üîá {build_user_link(target.full_name, target.id)} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration_str}\n"
                f"üí¨ –ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {e}")
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    elif cmd_line == '–±–∞–Ω':
        if not message.reply_to_message:
            await message.reply("üî® –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä:\n–±–∞–Ω\n—Ñ–ª—É–¥")
            return
        target = message.reply_to_message.from_user
        try:
            await bot.ban_chat_member(message.chat.id, target.id)
            await message.reply(
                f"üî¥ {build_user_link(target.full_name, target.id)} –∑–∞–±–∞–Ω–µ–Ω\nüí¨ –ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {e}")
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    elif cmd_line == '—Ä–∞–∑–º—É—Ç':
        if not message.reply_to_message:
            await message.reply("üîà –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä:\n—Ä–∞–∑–º—É—Ç")
            return
        target = message.reply_to_message.from_user
        try:
            await bot.restrict_chat_member(
                message.chat.id,
                target.id,
                permissions=ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_polls=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True,
                    can_change_info=True,
                    can_invite_users=True,
                    can_pin_messages=True
                ),
                until_date=None
            )
            await message.reply(f"üîà {build_user_link(target.full_name, target.id)} —Ä–∞–∑–º—É—á–µ–Ω.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ: {e}")
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ==== –ó–∞–ø—É—Å–∫ ====
if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))
